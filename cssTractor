#!/usr/bin/env node

// init module
let { exec } = require('child_process');


// instruction 

// cssTractor index.html        all

// command for vim nvim
// Обезательно нужно поставить w! в конеце ! так как бывает баг при обычной w файл сохраняется но при выводе cat file вывод пустое содержания 
// так как данный скрипт базируется на cat то это может привести к ошибки поэтому w!
// keymap.set("n", "<leader>cs", ":w! || !cssTractor -f %:t<CR>") -- cssTractor extract css
// keymap.set("n", "<leader>cb", ":w! || !cssTractor -b<CR>") -- cssTractor extract css


// empty list
let classes = []; // empty array
let id = []; // empty array
let class_and_id = [];


function css_main(html) {

  html.replace(/class=['"][^'"]+/g, function (m) {
    // https://regex101.com/r/jD0wX1/1
    classes = classes.concat(m.match(/[^'"]+$/)[0].split(" ")); // https://regex101.com/r/jD0wX1/2
  }); // take all classes

  classes = classes.filter(function (item, pos) {
    return classes.indexOf(item) == pos;
  }); // return unique classes

  for (let item in classes) {
    add_symbols = ".".concat(classes[item], " {}");
    class_and_id.push(add_symbols);
  }


  html.replace(/id=['"][^'"]+/g, function (m) {
    // https://regex101.com/r/jD0wX1/1
    id = id.concat(m.match(/[^'"]+$/)[0].split(" ")); // https://regex101.com/r/jD0wX1/2
  }); // take all classes

  id = id.filter(function (item, pos) {
    return id.indexOf(item) == pos;
  }); // return unique id 

  for (let item in id) {
    add_symbols = "#".concat(id[item], " {}");
    class_and_id.push(add_symbols); 
  } 
  // ----------------------
  byfer_copy(); 
}

// byfer putting class data into the clipboard
function byfer_copy() {
  let string_result = "";

  for (string_item in class_and_id) {
    string_result += String(class_and_id[string_item]).concat("\n\n");
  }
  string_result = string_result.substring(0, string_result.length-2); // delete /n symbol first and end 

  string_copy = `echo "${string_result}" | xclip -sel clip`;
  // we can see the unclosed process in htop after the script is executed clip -sel c this process of the xclip program will end automatically after the first insertion (this is a feature of the xclip program with these arguments)
  exec(string_copy, (error, stdout, stderr) => {
    console.log(`stdout: ${stdout}`);
  });
  console.log("Ok");
  process.exit();
}



function readFile(path) {
  // console.log(read_file); // ok
  exec(path, (error, stdout, stderr) => {
    css_main(html=stdout);
  });
}



// args cssTractor index.html <---
function main() {
  // let string_copy;

  let file;

  if ( process.argv[2] == "-b" ) {
    let buf = `xclip -o`;
    // we can see the unclosed process in htop after the script is executed clip -sel c this process of the xclip program will end automatically after the first insertion (this is a feature of the xclip program with these arguments)
    exec(buf, (error, stdout, stderr) => {
      css_main(html=stdout);
    });
  } 

  else if (process.argv[2] == "-f"){
    file = process.argv[3];
    const pwd = `pwd`;
    exec(pwd, (error, stdout, stderr) => {
      let path = "cat ".concat(String(stdout).trim().concat("/", file));
      // console.log(path);
      readFile(path=path);
    });
  } 

  else {
    console.log("Error in key selection !");
  }
}
// ----------------------

main();
